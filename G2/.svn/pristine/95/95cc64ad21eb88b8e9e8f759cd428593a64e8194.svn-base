package model;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;

import javax.swing.table.AbstractTableModel;

import dbManipulation.DBManipulation;

@SuppressWarnings("serial")
public class TableDataModel extends AbstractTableModel {
	private String name;
	private ArrayList<TableColumn> columns;
	private TableKey primaryKey;
	private ArrayList<TableKey> foreignKeys;
	private Vector<String> columnDisplayNames;

	// TODO Za sada filter nije iskoristen
	private String filter = "";

	private Vector<Vector<Object>> data;

	public TableDataModel(String name) {
		this.name = name;
		columns = new ArrayList<>();
		foreignKeys = new ArrayList<>();
		columnDisplayNames = new Vector();
	}

	public TableColumn getColumnByName(String name) {
		for (TableColumn column : columns)
			if (column.getName().equals(name))
				return column;
		return null;
	}

	public TableKey getForeignKeyByName(String name) {
		for (TableKey fk : foreignKeys)
			if (fk.getName().equals(name))
				return fk;
		return null;
	}

	@Override
	public String toString() {
		String s = "Table: " + name + "; Columns:\n";
		for (TableColumn column : columns) {
			s += column.toString() + "\n";
		}
		s += "Primary key:\n" + primaryKey.toString() + "Foreign Keys:\n";
		for (TableKey fKey : foreignKeys)
			s += fKey.toString();
		return s;
	}

	public String getName() {
		return name;
	}

	public Vector<Vector<Object>> getData() {
		return data;
	}

	public ArrayList<TableColumn> getColumns() {
		return columns;
	}

	public TableKey getPrimaryKey() {
		return primaryKey;
	}

	public ArrayList<TableKey> getForeignKeys() {
		return foreignKeys;
	}

	public void setColumns(ArrayList<TableColumn> columns) {
		this.columns = columns;
	}

	public void setPrimaryKey(TableKey primaryKey) {
		this.primaryKey = primaryKey;
	}

	public void setForeignKeys(ArrayList<TableKey> foreignKeys) {
		this.foreignKeys = foreignKeys;
	}

	@Override
	public int getColumnCount() {
		return columns.size();
	}

	@Override
	public int getRowCount() {
		return data.size();
	}

	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		return data.get(rowIndex).get(columnIndex);
	}

	public void fetchData() {
		boolean isFirst = true;
		String query = "SELECT ";

		// Izbor vlastitih kolona
		for (TableColumn column : columns) {
			Boolean isFK = false;
			for (TableKey fk : foreignKeys) {
				for (TableColumn fkColumn : fk.getColumns()) {
					if (column == fkColumn)
						isFK = true;
				}
			}
			if (!isFK) {
				if (column.getName().toString().toLowerCase().contains("obrisano"))
					continue;
				if (isFirst) {
					query += "[" + name + "].[" + column.getName() + "]";
					isFirst = false;
				} else
					query += ", [" + name + "].[" + column.getName() + "]";
				columnDisplayNames.add(column.getName());
			}
		}

		// Izbor kolona preko stranih kljuèeva
		for (TableKey fk : foreignKeys) {
			String nameField = "";
			TableDataModel parrentTable = new TableXmlParser().getTable(fk.getParentTable());
			for (TableColumn column : parrentTable.getColumns()) {
				if (column.getIsName())
					nameField = column.getName();
			}
			if (isFirst) {
				query += "["+fk.getName() + "].[" + nameField + "] AS " + "["+fk.getName()+"]";
				isFirst=false;
			}
			else
				query += ", ["+fk.getName() + "].[" + nameField + "] AS " + "["+fk.getName()+"]";
			columnDisplayNames.add(fk.getName().substring(3, fk.getName().length()));

		}
		query += " FROM [" + this.getName() + "] ";

		// Join
		for (TableKey fk : foreignKeys) {
			query += " LEFT JOIN [" + fk.getParentTable() + "] ["+fk.getName()+"] ON ";
			Boolean isFirstInJoin = true;
			for (TableColumn column : fk.getColumns()) {
				if (isFirstInJoin) {
					query += "["+getName() + "].[" + column.getName() + "]=[" + fk.getName() + "].["
							+ column.getParrentName()+"]";
					isFirstInJoin = false;
				} else
					query += " AND ["+getName() + "].[" + column.getName() + "]=[" + fk.getName() + "].["
							+ column.getParrentName()+"]";
			}
		}
		System.out.println(query);

		DBManipulation DBM = DatabaseConnection.getInstance();
		ResultSet rSet = null;
		try {
			Statement statement = DBM.getDbConnection().createStatement();
			rSet = statement.executeQuery(query);
			int i = 0;
			data = new Vector<>();
			while (rSet.next()) {
				data.add(new Vector<>());
				for (int j = 0; j < columnDisplayNames.size(); j++) {
					data.get(i).add(rSet.getObject(j + 1));
				}
				i++;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Vector<String> getColumnDisplayNames() {
		return columnDisplayNames;
	}

}
